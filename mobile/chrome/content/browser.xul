<?xml version="1.0"?>

<window id="main-window"
        onload="startup();"
        windowtype="navigator:browser"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        xmlns:svg="http://www.w3.org/2000/svg"
        xmlns:html="http://www.w3.org/1999/xhtml">

<script type="application/javascript">

let Cc = Components.classes;
let Ci = Components.interfaces;
let Cu = Components.utils;
let Cr = Components.results;

Cu.import("resource://gre/modules/XPCOMUtils.jsm");
Cu.import("resource://gre/modules/NetUtil.jsm");
Cu.import("resource://gre/modules/Services.jsm")

function dump(a) {
    Cc["@mozilla.org/consoleservice;1"]
        .getService(Ci.nsIConsoleService)
        .logStringMessage(a);
}

var fennecProgressListener = null;

function startup() {

    window.QueryInterface(Ci.nsIDOMChromeWindow).browserDOMWindow = new nsBrowserAccess(this);
    dump("zerdatime " + Date.now() + " - browser chrome startup finished.");

    try {
        fennecProgressListener = new FennecProgressListener();
        document.getElementById('home').addProgressListener(fennecProgressListener, Ci.nsIWebProgress.NOTIFY_ALL);
    } catch (e) { dump("233 doh " + e); }
}


function nsBrowserAccess(chromeWindow) {
    this.chrome = chromeWindow;
}

nsBrowserAccess.prototype = {

  openURI: function browser_openURI(aURI, aOpener, aWhere, aContext) {
      let frame = this.chrome.document.getElementById("home");
      frame.loadURI(aURI.spec, null, null);
      return null;
  },

  openURIInFrame: function browser_openURIInFrame(aURI, aOpener, aWhere, aContext) {
      dump("nsBrowserAccess::openURIInFrame");
      return null;
  },

  isTabContentWindow: function(aWindow) {
    return !(this.chrome == aWindow);
  },

  QueryInterface: XPCOMUtils.generateQI([Ci.nsIBrowserDOMWindow]),
};


function FennecProgressListener(){ dump("FennecProgressListener created"); }

FennecProgressListener.prototype = {

    onStateChange: function(aWebProgress, aRequest, aStateFlags, aStatus) {
        dump("progressListener.onStateChange");

        try {
            Cc["@mozilla.org/android/bridge;1"]
                .getService(Ci.nsIAndroidBridge)
                .handleGeckoMessage("{\"gecko\": {\"type\": \"value\", \"event_specific\": \"value\"}}");
        } catch (e) { dump("aa " + e); }

    },

    onLocationChange: function (aBrowser, aWebProgress, aRequest, aLocationURI) { dump("progressListener.onLocationChange"); },
    onSecurityChange: function (aBrowser, aWebProgress, aRequest, aState) { dump("progressListener.onSecurityChange"); },
    onProgressChange: function (aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress, aCurTotalProgress, aMaxTotalProgress) { dump("progressListener.onProgressChange");},
    onStatusChange: function (aBrowser, aWebProgress, aRequest, aStatus, aMessage) { dump("progressListener.onStatusChange");},

    QueryInterface: XPCOMUtils.generateQI([Ci.nsIWebProgressListener,
                                           Ci.nsISupportsWeakReference]),
};

</script>

<browser id="home" type="content-primary" flex="1" src="about:blank"/>

</window>
